name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-run:
    name: Docker Image test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t app-test .

      - name: Run container in background
        run: docker run -d -p 8000:80 --name app-test -e DATABASE_URL=${{ secrets.DATABASE }} app-test

      - name: Wait for the app to start
        run: |
          echo "Waiting for FastAPI app to start..."
          sleep 5

      - name: Send test request to FastAPI app
        run: |
          curl --fail http://localhost:8000/ || (echo "App failed to respond" && exit 1)
      
      - name: Container logs
        if: always()
        run: docker logs app-test

      - name: Cleanup
        if: always()
        run: docker rm -f app-test || true

  docker-build-push:
    name: Push Docker Image to ECR
    needs: build-run
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.1.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      id: build
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: journal-app
        IMAGE_TAG: ${{ github.sha }}
      run: |

        IMAGE_URI="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
        docker build -t "$IMAGE_URI" .
        docker push "$IMAGE_URI"
        echo "$IMAGE_URI" > image_uri.txt

    - name: Upload image URI artifact
      uses: actions/upload-artifact@v4
      with:
        name: image-uri
        path: image_uri.txt
        retention-days: 1

  deploy:
    name: Build Terraform and run EKS
    needs: docker-build-push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Apply
        run: |
          cd infra
          terraform init
          terraform apply \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASS }}" \
          -var="principal_arn=${{ secrets.PRINCIPAL_ARN }}" \
          -var="public_access_cidr=${{ secrets.ACCESS_CIDR }}" \
          -auto-approve

      - name: Get Terraform outputs
        id: tf-out
        run: |
          cd infra
          echo "rds_endpoint=$(terraform output -raw db_endpoint)" >> $GITHUB_OUTPUT
          echo "eks_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT
          echo "eks_region=$(terraform output -raw vpc_region)" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: |
          aws eks --region "${{ steps.tf-out.outputs.eks_region }}" \
          update-kubeconfig --name "${{ steps.tf-out.outputs.eks_name }}"

      - name: Download image URI artifact
        uses: actions/download-artifact@v4
        with:
          name: image-uri
          path: .

      - name: Read image URI and deploy
        id: read-image
        run: |
          IMAGE_URI=$(cat image_uri.txt)
          echo "Deploying image $IMAGE_URI"
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

      - name: Update Kubernetes deployment image
        run: |
          IMAGE_URI=$(cat image_uri.txt)
          sed -i "s|REPLACE_ME_IMAGE|$IMAGE_URI|g" k8s/deployment.yaml
          sed -i "s/DB_ENDPOINT/${{ steps.tf-out.outputs.rds_endpoint }}/g" k8s/configmap.yaml

      - name: K8s Secrets creation
        run: |
          kubectl create secret generic db-secrets \
          --from-literal=DB_USER=${{ secrets.DB_USER_REPLACE }} \
          --from-literal=DB_PASSWORD=${{ secrets.DB_PASS_REPLACE }} \
          --save-config

      - name: Apply manifests
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Delete AWS resources
        if: always()
        run: |
          cd infra
          terraform init
          terraform destroy -auto-approve

